import argparse
import subprocess
import signal
import sys
import pyfiglet
from concurrent.futures import  ThreadPoolExecutor
from termcolor import colored

ascii_banner = pyfiglet.figlet_format("ICMP SCANNER")
print(colored(ascii_banner,'yellow'))

def def_handler(sig, frame):
    print(colored(f"\n[!] Saliendo del programa...",'red'))
    sys.exit(1)

signal.signal(signal.SIGINT, def_handler) #ctrl + c

def get_arguments():
    parser = argparse.ArgumentParser(description='Herramienta para descubrir hosts activos en la red (ICMP)')
    parser.add_argument("-t", "--target", dest="target", required=True, help="Host o rango de red a escanear")

    args = parser.parse_args()

    return  args.target

def parse_target(target_str):

    #192.168.1.1-100
    target_str_splitted = target_str.split('.')  #["192", "168", "1", "1-100"]
    first_three_octets = '.'.join(target_str_splitted[:3])

    if len(target_str_splitted) == 4:
        if "-" in target_str_splitted[3]:
            start, end = target_str_splitted[3].split('-') # [1-100] = ["1", "100"]
            return [f"{first_three_octets}.{i}" for i in range(int(start), int(end)+1)]
        else:
            return [target_str]
    else:
        print(colored(f"\n[!] El formato de IP o rango de IP no es válido", 'red'))

def host_discovery(target):
    
    try:
        ping = subprocess.run(["ping", "-c", "1", target], timeout=1, stdout=subprocess.DEVNULL)

        if ping.returncode == 0:
            print(colored(f"\t[i] La IP {target} está activa  ", 'green'))
    except subprocess.TimeoutExpired:
        pass

def main():
    target_str = get_arguments()
    targets = parse_target(target_str)

    print(colored(f"\n[+] Host activos en la red:\n", 'blue'))

    max_threads = 100

    with ThreadPoolExecutor(max_workers=max_threads) as executor:
        executor.map(host_discovery, targets)
    

if __name__ == '__main__':
    main()

